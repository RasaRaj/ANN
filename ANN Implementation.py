# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eZrM0DFk3tnltm92Waz_1Tmzuvh6XuOV
"""

from google.colab import drive

drive.mount('/content/gdrive')

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import OneHotEncoder

dataframe = pd.read_csv('/content/gdrive/MyDrive/L-4; T-1/healthcare-dataset-stroke-data.csv')
#dataframe
#dataframe = dataframe.dropna() #remove all the null value form the data set

# fill null values with mean of respective column
dataframe.fillna(dataframe.mean(), inplace=True)
print(dataframe)

# load the boston dataset 
#dataframe =  pd.read_csv('SAheart.csv')
# le = LabelEncoder()
# dataframe['classification'] = le.fit_transform(dataframe['classification'])

# defining feature matrix(X) and response vector(y) 
X = dataframe.iloc[:,1:-1] # last er ta bade
y = dataframe.iloc[:,-1] #last er ta

#convert categorical to numeric
labelencoder_X=LabelEncoder()
z = X.iloc[:,0]  #0,1,2,3,4
#print(z)

X.iloc[:,0] = labelencoder_X.fit_transform(z.values.ravel())

labelencoder_X=LabelEncoder()
z = X.iloc[:,4]  #0,1,2,3,4
#print(z)

X.iloc[:,4] = labelencoder_X.fit_transform(z.values.ravel())

labelencoder_X=LabelEncoder()
z = X.iloc[:,5]  #0,1,2,3,4
#print(z)

X.iloc[:,5]= labelencoder_X.fit_transform(z.values.ravel())

labelencoder_X=LabelEncoder()
z = X.iloc[:,6]  #0,1,2,3,4
#print(z)

X.iloc[:,6] = labelencoder_X.fit_transform(z.values.ravel())


labelencoder_X=LabelEncoder()
z = X.iloc[:,9]  #0,1,2,3,4
#print(z)

X.iloc[:,9] = labelencoder_X.fit_transform(z.values.ravel())

#z score normalization
scaller = StandardScaler()
X = scaller.fit_transform(X) 


# encode class values as integers
encoder = LabelEncoder()
encoder.fit(y)
y = encoder.transform(y)

# splitting X and y into training and testing sets  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

from keras.utils import np_utils
# convert integers to dummy variables (i.e. one hot encoded)
y_train = np_utils.to_categorical(y_train)


#print(X_train.shape)
#print(y_train)
#print(y_test)


# define the keras model
model = Sequential()
model.add(Dense(6, input_dim=10, activation='relu'))
model.add(Dense(4, activation='relu'))
model.add(Dense(2, activation='softmax'))

# compile the keras model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


# fit the keras model on the dataset
model.fit(X_train, y_train, epochs=200, batch_size=5)

acc = model.evaluate(X_train, y_train)
print("Loss:", acc[0], " Accuracy:", acc[1])

pred = model.predict(X_test)
pred_y = pred.argmax(axis=-1)

#count_class(train_label)

#print(y_test)
print(pred_y)

# get user input
gender = input("Enter gender (0 for female, 1 for male, 2 for other): ")
age = input("Enter age: ")
hypertension = input("Do you have hypertension? (0 for no, 1 for yes): ")
heart_disease = input("Do you have heart disease? (0 for no, 1 for yes): ")
ever_married = input("Are you married? (0 for no, 1 for yes): ")
work_type = input("Enter work type (0 for children, 1 for Govt_job, 2 for Never_worked, 3 for Private, 4 for Self-employed): ")
Residence_type = input("Enter residence type (0 for rural, 1 for urban): ")
avg_glucose_level = input("Enter average glucose level: ")
bmi = input("Enter bmi: ")

smoking_status = input("Enter smoking status (0 for formerly smoked, 1 for never smoked, 2 for smokes, 3 for unknown): ")

# make predictions on the user input
input_data = np.array([[gender, age, hypertension, heart_disease, ever_married, work_type, Residence_type, avg_glucose_level,bmi, smoking_status]])
input_data = scaller.transform(input_data)
pred = model.predict(input_data)
pred_y = pred

if pred_y[0][1] > pred_y[0][0]:
    print("The user is predicted to have a stroke.")
else:
    print("The user is predicted to not have a stroke.")
